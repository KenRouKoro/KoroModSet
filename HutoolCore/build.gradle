import java.util.concurrent.atomic.AtomicInteger

plugins {
    id 'java'
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

group 'cn.korostudio.mc'
version '1.0.0'
def hutool_version = '5.8.16'

def project_version = version
def forge_version = '1.0.0'
def fabric_version = '1.0.0'
def paper_version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation "cn.hutool:hutool-all:${hutool_version}"
    implementation "com.google.zxing:core:3.3.3"


}
import java.nio.file.Files
import java.nio.file.Paths

tasks.register('mergeManifests') {
    doFirst {
        // 清空 external 目录
        delete "$buildDir/external"
    }
    doLast {
        def paperManifest = "$buildDir/external/Paper/META-INF/MANIFEST.MF"
        def forgeManifest = "$buildDir/external/Forge/META-INF/MANIFEST.MF"
        def fabricManifest = "$buildDir/external/Fabric/META-INF/MANIFEST.MF"
        def mergedManifest = "$buildDir/external/META-INF/MANIFEST.MF"

        copy {
            from(zipTree("../HutoolCoreInPaper/build/libs/HutoolCoreInPaper-${paper_version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Paper")
        }
        copy {
            from(zipTree("../HutoolCoreInForge/build/libs/hutoolcore-${forge_version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Forge")
        }
        copy {
            from(zipTree("../HutoolCoreInFabric/build/libs/HutoolCoreInFabric-${fabric_version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Fabric")
        }

        // 读取所有 MANIFEST.MF 文件的内容
        def paperLines = Files.readAllLines(Paths.get(paperManifest))
        def forgeLines = Files.readAllLines(Paths.get(forgeManifest))
        def fabricLines = Files.readAllLines(Paths.get(fabricManifest))

        // 合并多个 MANIFEST.MF 文件的内容，去掉重复行并在合适的地方换行
        def manifestContent = new LinkedHashSet<>()
        manifestContent.addAll(paperLines)
        manifestContent.addAll(forgeLines)
        manifestContent.addAll(fabricLines)

        // 将合并后的内容写入新的 MANIFEST.MF 文件，并在文件末尾添加换行符
        Files.createDirectories(Paths.get("$buildDir/external/META-INF"))
        def manifestContentWithoutEmptyLines = manifestContent.findAll { it != "" }
        Files.write(Paths.get(mergedManifest), (manifestContentWithoutEmptyLines.join("\n") + "\n").getBytes())

        // 提取 Forge、Fabric、Paper 文件夹内除了 META-INF/MANIFEST.MF 之外的其他内容
        copy {
            from(zipTree("../HutoolCoreInPaper/build/libs/HutoolCoreInPaper-${paper_version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("../HutoolCoreInForge/build/libs/hutoolcore-${forge_version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("../HutoolCoreInFabric/build/libs/HutoolCoreInFabric-${fabric_version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
    }
}

shadowJar {
    dependsOn(mergeManifests)
    from("$buildDir/external")
    exclude("Paper/**")
    exclude("Forge/**")
    exclude("Fabric/**")
    manifest {
        from("$buildDir/external/META-INF/MANIFEST.MF")
    }
    dependencies {
        // 只打包 cn.hutool:hutool-all 依赖及其所有传递依赖
        include(dependency('cn.hutool:hutool-all'))
        include(dependency('com.google.zxing:core:3.3.3'))
        // 排除其他依赖
        exclude(dependency('org.slf4j:slf4j-api'))
        exclude(dependency('org.projectlombok:lombok'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-engine'))
    }
    archiveFileName.set("HutoolCore-${project_version}-Hutool-${hutool_version}-For-Forge-Fabric-Paper.jar")
}
test {
    useJUnitPlatform()
}